<!DOCTYPE HTML>
<html style="margin:10px" xmlns="http://www.w3.org/1999/html" xmlns="http://www.w3.org/1999/html">
    <head>

		<title> Musical Harmonizer </title>
        <link rel="stylesheet" type="text/css" href="../public/bootstrap.css">
        <link rel="stylesheet" type="text/css" href="../public/app.css">

        <!-- The following 'include' lets us play midi files from the browser 
        Note: the <% // stuff %> is part of the ejs template. the angle bracket 
        and percent sign will be read throughout the entire page, even in comments -->

        <% include ../js/midiPlayer.js %>

        <!-- Our own Javascript goes here! -->
        <script> 

        // Global Variables 
        var octave = 4; 
        var duration = 128; // quarter note

		var userInput = [];

		var lineLength = 0;

		var keyToNote = {}; // C8  == 108
		var noteToKey = {}; // 108 ==  C8

		(function () {
			var A0 = 0x15; // first note
			var C8 = 0x6C; // last note
			var number2key = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
			for (var n = A0; n <= C8; n++) {
				var octave = (n - 12) / 12 >> 0;
				var name = number2key[n % 12] + octave;
				keyToNote[name] = n;
				noteToKey[n] = name;
			}
		})();

        // Detect keyboard presses 
        document.onkeydown = function(event){
		    var key_press = String.fromCharCode(event.keyCode)
		    var key_code = event.keyCode 

		    var notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B']; 
		    var keyPresses = ['A', 'S', 'D', 'F', 'G', 'H', 'J'];

		    var index = keyPresses.indexOf(key_press);
 
		    if (index !== -1)
		    {
		    	playNote(notes[index]); 
		    }

			else
			{
				if (key_code == 37)
				{
					duration /= 2;
				}

				else if (key_code == 38)
				{
					octave ++;
				}

				else if (key_code == 39)
				{
					duration *=2;
				}

				else if (key_code == 40)
				{
					octave--; 
				}
			}
		    
		};

		$( document ).ready(function() {
			$('#legend').children().on('click', function() {
				$('.active').toggleClass('active');
				console.log($(this).val());
				duration = parseInt(this.alt, 10);
				$(this).toggleClass('active');
			});
		});

		function updateDisplay(type){

			if (type == 'clear')
			{
				$('#display').html('');
				userInput = [];
				$('.line').css('width', 'inherit');
			}

			else if (type == 'delete')
			{
				var index = $('#display').html().lastIndexOf('class');
				console.log(index);
				$('#display').html($('#display').html().substring(0, index - 8));

				userInput.pop();
			}
			else {
				var html = $('#display').html();

				var note = userInput[userInput.length - 1].split(',')[0];
				var duration = userInput[userInput.length - 1].split(',')[1];
				var color = getColor(note);

				html += "<div class='note' style='top:" + produceHeight(note) + "%; width:" + Math.round(duration / 3.0) +
				"px; background-color:" + color + ";'> " + note + "</div>";

				$('#display').html(html);

				var width = $('.line').css('width');
				console.log(width);
				$('.line').css('width', parseInt(width.substring(0, width.length - 2), 10) + 50 + 'px');
			}

			$('#melody').val((userInput.length != 0) ? userInput.join(' ') : '');

		}

		function getColor(note) {
			var x = Math.round((keyToNote[note] - 60)/20 * 255);
			return color = 'rgb(' + x + ', 150,' + (255 -x ) + ')';
		}


		function produceHeight(note)
		{
			var num_notes = {'C':0, 'Db': 1, 'D': 1, 'Eb': 2, 'E':2, 'Fb': 3, 'F': 3, 'Gb':4, 'G':4, 'Ab':5,
				'A':5, 'Bb':6, 'B':6, 'Cb':7
			}

			var note_string = note.substring(0, note.length - 1);
			var octave = note.substring(note.length - 1, note.length);

			console.log(note_string);
			console.log(octave);

			return 80 - ((7 * octave - 28) + num_notes[note_string]) * 5;
		}


		// Plays the midi file by name
        function playFile(name) {

			userInput = [];

        	var element1 = document.getElementById('melody_instrument');
        	var element2 = document.getElementById('harmony_instrument');

        	var instrument1 = element1.options[element1.selectedIndex].value; 
        	var instrument2 = element2.options[element2.selectedIndex].value; 

        	// each instrument has a unique number associated with it
        	var lookup = {'alto_sax': 65, 'acoustic_grand_piano': 0, 'choir_aahs': 52};
        
            MIDI.loadPlugin({
            soundfontUrl: "./soundfont/",
            instruments: [ instrument2, instrument1],
            callback: function() {

            	// we must set the program of the tracks to the instruments we've chosen 
        		MIDI.programChange(0, lookup[instrument2]);	// lookup[instrument]
        		MIDI.programChange(1, lookup[instrument1]);

                MIDI.Player.loadFile('./mid/' + name, MIDI.Player.start);
               }
        	});

			var prev;

			MIDI.Player.addListener(function(data) { // set it to your own function
				var now = data.now; // where we are now
				var end = data.end; // time when song ends
				var channel = data.channel; // channel note is playing on
				var message = data.message; // 128 is noteOff, 144 is noteOn
				var note = data.note; // the note
				var velocity = data.velocity; // the velocity of the note
				console.log('note ' + note);
				console.log('message ' + message);
				var note_name = noteToKey[note];
				if (note != 120){
					var note_oct = note_name.substring(note_name.length - 1);
					var oct;
					console.log(note_oct);
					console.log(octave);
					if (note_oct == octave.toString()) {
							oct = 4;
							octave = note_oct;
						}
						else {
							oct = 5;
							octave = note_oct - 1;
						}
					if (message == 144)
					{
						console.log('here');
						prev = now;
						console.log(note_name + " coloring");
						console.log(note_name.substring(0, note_name.length - 1) + oct);
						coloring(note_name.substring(0, note_name.length - 1) + oct);
					}
					if (message == 128) {
						console.log('now ' + now);
						console.log('note ' + note);
						var duration = (now - prev) / 500.0 * 128;
						console.log('duration ' + duration);
						if (noteToKey.hasOwnProperty(note)) {
							userInput.push(noteToKey[note] + ',' + duration);
							console.log(userInput[userInput.length - 1]);
							updateDisplay();
						if (note_name.length == 3) {
							offblack(note_name.substring(0, note_name.length - 1) + oct);
						}
						else {
							offwhite(note_name.substring(0, note_name.length - 1) + oct);
						}
						}
						}
						octave = 4;
				}
			});
    	}

    	// Plays a note from mp3 library
        function playNote(note)
        {
        	var audio = new Audio(); 
        	audio.src = './mp3/' + note + octave + '.mp3'; 
        	audio.play(); 

			// if current user input length is 0, then reset it to []. (calling split directly gives an unwanted ' ')
			if (userInput.length !== 0)
			{
				userInput = $('#melody').val().split(' ');

			}
			else
			{
				userInput = [];
			}

			userInput.push(note + octave +',' + duration);

        	/*
			The following code can be used to dynamically generate the mp3's (as midi's), 
			but it is terribly slow. There is a significant delay between pressing 
			the button and hearing the piano sound. 

        	console.log(MIDI.keyToNote); 
        	note = MIDI.keyToNote[note]; 

	        MIDI.loadPlugin({
			soundfontUrl: "./soundfont/",
			instrument: "acoustic_grand_piano",
			callback: function() {
				var delay = 0; // play one note every quarter second
				var velocity = 127; // how hard the note hits
				// play the note
				MIDI.setVolume(0, 127);
				MIDI.noteOn(0, note, velocity, delay);
				MIDI.noteOff(0, note, delay + 0.75);
				}
			});
			*/

			updateDisplay();
		}
		
		// Changes the global variable octave based on what is selected 
		function changeOctave()
		{
    		var e = document.getElementById('octave_selector');
	  		octave = e.options[e.selectedIndex].value;
		}
		function playNoteOct2(note) {
			octave++;
			playNote(note);
			octave--;
		}

		function coloring(obj_id) {
			var colorOctave = octave;
			var colorstring = obj_id.substring(0, obj_id.length - 1);
			if (obj_id.substring(obj_id.length - 1, obj_id.length) == "5")
				colorOctave++;
			document.getElementById(obj_id).style.background = getColor(colorstring + colorOctave);

		}

		function offwhite(obj_id){
			document.getElementById(obj_id).style.background = "#F4F4F4";
		}
		function offblack(obj_id){
			document.getElementById(obj_id).style.background = "#000000";
		}
        </script>
    </head>

    <body>
    	<!-- for styling purposes only -->
    	<div id = "content"> 

			<p id = "status"> Keyboard for Playback Only </p>

			<div>
				<label id="select_octave"> Select an Octave:</label>
				<select class = "dropdown" id = "octave_selector" onchange="changeOctave();">
					<option value="3">3</option>
					<option value="4" selected="selected">4</option>
					<option value="5">5</option>
					<option value="6">6</option>
				</select>
			</div>

			<nav id = "keys">
				<%
				var notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];

				for (var i = 0; i < notes.length; i++)
				  {
				%> <button class="btn btn-default navbar-btn" onclick = "playNote('<%=notes[i]%>')"> <%= notes[i] %> </button>
				<% } %>
			</nav>

			<p> <b> Keyboard Input: </b>keys A,S,D,F,G,H,J </p>
			<div id="keycontainer">
				<div id="keyboard" class="center">
					<div class="octave">
						<div id="o4">
							<div id="C4" class="key white" onmouseout = "offwhite('C4')" onmouseover = "coloring('C4')" onclick = "playNote('C')">	</div>
							<div id="D4" class="key white" onmouseout = "offwhite('D4')" onmouseover = "coloring('D4')" onclick = "playNote('D')">	</div>
							<div id="E4" class="key white" onmouseout = "offwhite('E4')" onmouseover = "coloring('E4')" onclick = "playNote('E')">	</div>
							<div id="F4" class="key white" onmouseout = "offwhite('F4')" onmouseover = "coloring('F4')" onclick = "playNote('F')">	</div>
							<div id="G4" class="key white" onmouseout = "offwhite('G4')" onmouseover = "coloring('G4')" onclick = "playNote('G')">	</div>
							<div id="A4" class="key white" onmouseout = "offwhite('A4')" onmouseover = "coloring('A4')" onclick = "playNote('A')">	</div>
							<div id="B4" class="key white" onmouseout = "offwhite('B4')" onmouseover = "coloring('B4')" onclick = "playNote('B')">	</div>
						</div>

						<div class="flats">
							<div id="Db4" class="key black" onmouseout = "offblack('Db4')" onmouseover = "coloring('Db4')" onclick = "playNote('Db')"> </div>
							<div id="Eb4" class="key black" onmouseout = "offblack('Eb4')" onmouseover = "coloring('Eb4')" onclick = "playNote('Eb')"> </div>
							<div id="Gb4" class="key black" onmouseout = "offblack('Gb4')" onmouseover = "coloring('Gb4')" onclick = "playNote('Gb')"> </div>
							<div id="Ab4" class="key black" onmouseout = "offblack('Ab4')" onmouseover = "coloring('Ab4')" onclick = "playNote('Ab')"> </div>
							<div id="Bb4" class="key black" onmouseout = "offblack('Bb4')" onmouseover = "coloring('Bb4')" onclick = "playNote('Bb')"> </div>
						</div>
					</div>
					<div class="octave">
						<div id="o5">
							<div id="C5" class="key white" onmouseout = "offwhite('C5')" onmouseover = "coloring('C5')" onclick = "playNoteOct2('C')">	</div>
							<div id="D5" class="key white" onmouseout = "offwhite('D5')" onmouseover = "coloring('D5')" onclick = "playNoteOct2('D')">	</div>
							<div id="E5" class="key white" onmouseout = "offwhite('E5')" onmouseover = "coloring('E5')" onclick = "playNoteOct2('E')">	</div>
							<div id="F5" class="key white" onmouseout = "offwhite('F5')" onmouseover = "coloring('F5')" onclick = "playNoteOct2('F')">	</div>
							<div id="G5" class="key white" onmouseout = "offwhite('G5')" onmouseover = "coloring('G5')" onclick = "playNoteOct2('G')">	</div>
							<div id="A5" class="key white" onmouseout = "offwhite('A5')" onmouseover = "coloring('A5')" onclick = "playNoteOct2('A')">	</div>
							<div id="B5" class="key white" onmouseout = "offwhite('B5')" onmouseover = "coloring('B5')" onclick = "playNoteOct2('B')">	</div>
						</div>

						<div class="flats">
							<div id="Db5" class="key black" onmouseout = "offblack('Db5')" onmouseover = "coloring('Db5')" onclick = "playNoteOct2('Db')"> </div>
							<div id="Eb5" class="key black" onmouseout = "offblack('Eb5')" onmouseover = "coloring('Eb5')" onclick = "playNoteOct2('Eb')"> </div>
							<div id="Gb5" class="key black" onmouseout = "offblack('Gb5')" onmouseover = "coloring('Gb5')" onclick = "playNoteOct2('Gb')"> </div>
							<div id="Ab5" class="key black" onmouseout = "offblack('Ab5')" onmouseover = "coloring('Ab5')" onclick = "playNoteOct2('Ab')"> </div>
							<div id="Bb5" class="key black" onmouseout = "offblack('Bb5')" onmouseover = "coloring('Bb5')" onclick = "playNoteOct2('Bb')"> </div>
						</div>
					</div>
				</div>
			</div>
				<div id="legend">
					<img src="../public/eighth_note.png" alt="64"/> = Eighth Note
					<img class="active" src="../public/quarter_note.png" alt="128"/> = Quarter Note
					<img src="../public/half_note.png" alt="256"/> = Half Note
					<img src="../public/quarter_rest.png" alt="Quarter Rest"/> = Quarter Rest
				</div>
			<br/>

			<div id="noteContainer">
				<img id="clef" src="../public/treble_clef.png">
				<div id="display"></div>

				<% for (var i = 0; i < 5; i++) { %>
					<div class="line" style="top: <%=10 * i + 35%>%;"></div>
				<% } %>

			</div>

			<div id="controls">
				<button type="button" class="btn btn-warning" onclick="updateDisplay('delete')"> Delete </button>
				<button type="button" class="btn btn-danger" onclick="updateDisplay('clear')"> Clear </button>
			</div>

			<div id="midi">
				<h1> Javascript Midi Player </h1>

				<p> <b> Instructions: </b> When your melody is ready, select harmony options and press the green Generate Midi button. Then, use the playback options to select your instruments and Play! </p>
				<br/>
				<p id="input" > <b>Input Format:</b> noteOctave,duration noteOctave,duration ... </p>
				<form method="post" action="generate">
					<label> Melody </label>
					<input 	type="text"
							size = "30"
							style = "margin: 15px"
							id="melody"
							name="pattern"
							placeholder="Enter a string of Notes here, separated by commas"
							value = ""
									 />  <br/>
					<label>Beats per Measure</label>
					<select class = "dropdown" name = 'time'>
						<option value="2"> 2</option>
						<option value="3"> 3 </option>
						<option value="4"> 4 </option>
					</select> <br/>
					<label> Harmony </label>
					<input 	type="text"
							size = "30"
							style = "margin: 15px"
							id="harmony"
							name="harmony"
							placeholder="Enter a string of Notes here, separated by commas"
							value = ""
									 />
					<br/>
					<input type="radio" name="harmonyType" value="byNote">Harmonize Each Note </input> <br>
					<input type="radio" name="harmonyType" value="byMeasure" checked>Harmonize Each Measure</input>

					<br/>
					<input type="radio" name="chordQuality" value="maj" checked>Major<br>
					<input type="radio" name="chordQuality" value="min">Minor<br></input>
					<input type="radio" name="harmonySubtype" value="chord" checked>Chords<br>
					<input type="radio" name="harmonySubtype" value="waltz">Waltz<br></input>
					<input type="number" name="transpose" value="0">Transpose</input>
					<button class = "btn btn-success" type="submit">
						Generate Midi
					</button>
				</form>
				<br/>
				<% if (generated) { %>
					<p> Something has been generated! Click Play! </p>
				<% } else {%>
					<p> Nothing has been generated yet :( </p>
				<% } %>
				<br/>
				<div id="instrument_selector">
					<label>  Melody Instrument:</label>
					<select class = "dropdown" id = 'melody_instrument'>
						<option value="alto_sax">Antuan's Sax</option>
						<option value="acoustic_grand_piano" selected> Andrew's Piano </option>
						<option value="choir_aahs"> Evan's Voice </option>
					</select>
					<label> Harmony Instrument:</label>
					<select class = "dropdown" id = 'harmony_instrument'>
						<option value="alto_sax">Antuan's Sax</option>
						<option value="acoustic_grand_piano" selected> Andrew's Piano </option>
						<option value="choir_aahs"> Evan's Voice </option>
					</select>
				</div>

				<button class="btn btn-primary" onclick="playFile('melody.mid')"> Play Melody Only! </button>
				<button class="btn btn-primary" onclick="playFile('harmony.mid')"> Play with Harmony! </button>

				<br/>

				<form method = "get" action="download">
					<button  class="btn btn-danger" type="submit"> Download </button>
				</form>

			</div>
		</div>
 	</body>
</html>
